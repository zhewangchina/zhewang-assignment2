## To cache the inverse of a matrix:
- +## Matrix inversion is often a costly computation and it is benificial to cache the inverse
  - +## of a matrix rather than compute it repeatedly.
  - +## So I create two functions that are used to create an object that 
  - +## stores a matrix and caches its inverse.
  
  - +## This function creates a special "matrix" object to cache inverse.
  - +
  - +makeCacheMatrix <- function(x = matrix()) {  ##this will finally store the final inverse of matrix value.
  inv <- NULL
  set <- function(y) {
    x <<- y
    inv <<- NULL  ## if the value changes, the inverse would be null and recomputed.
  }
  get <- function() x
  setInverse <- function(inverse) inv <<- inverse  ## set the value which is recomputed.
  getInverse <- function() inv  ## display the value
  list(set = set,
       get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}


## This function computes the inverse of the special "matrix" created by 
## makeCacheMatrix above. If the inverse has already been calculated (and the 
## matrix has not changed), then it should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
  ## Return a matrix that is the inverse of 'x'
  inv <- x$getInverse()  ## just check if the particular matrix is not changing, it would display inverse matrix with the notion which says "getting cached data"
  if (!is.null(inv)) {
    message("getting cached data")
    return(inv)
  }
  mat <- x$get()  ## only when the matrix is changing.
  inv <- solve(mat, ...)  ## compute the inverse of matrix.
  x$setInverse(inv)  ## set inv to the matrix variable.  
  inv  ## return the inverse matrix.
}
